//ARRAY

1) Array.binarySearch (array, clave) :pos debe etar ordenado para que el método funcione

2) Arrays.mismatch (array1, array2 ) devuelve -1 si los array que compara son oiguales o el índice
	del primer discordante
	
3) Arrays.compare (a1, a2, comaparador? ) : 1, -1 , 0

4) [] en los arrays báiscos no está sobreescrito 
	el equals, así que se ejecuta el de object
	que pregunta por la dirección, no por contenido

5) El clone de arrray [] da otra dirección pero el
   mismo contenido. Clona, como se espera.
   
6) Para comparar dos arrays Arrays.equals(a1, a2)

-----------------------------------------------------------------------
-----------------------------------------------------------------------

//STRINGS

1) El método isBlank devuelve true si la cadena está vacía o contiene 
todo espacios blancos

2) Strings son imutables: si le cambias el valor, se crear automáticamente una variable nueva, perservando la orignal
   Esto hace de evitar modificaciones en datos pasados por par�metros
   
   Hacer una clase final evita que pueda heredarse de ella y por tanto, redefinir
   métodos y atributos que pudieran alterar el estado del objeto padre, indirectamente.

3) strip () -- método que quita los espacios por delante y por detrás.

4) substring [) - 1º incluído 2º no incluido


5) no puedo especificar tamaño si uso llaves con valores
	String[ ] sa = new String[3]{ "a", "b", "c"}; ---NO VALE
	String[ ] sa = new String[]{ "a", "b", "c"}; ---SÍ VALE
----------------------------------------------------------------------------
----------------------------------------------------------------------------

//FINAL

	final aplicado a atributos provoca que no pueda modicarse el valor una vez asignado
	- sólo puede asignarse en el constructor-

	final aplicado a clases hacen que de esa clase no pueda heredarse

	final aplicado a métodos hacen que no puedan sobreescribirse

	En los casos de clases y métodos se persigue facilitar la inmutabilidad
	(que subclases no se pueda modificar el estado de un objeto sin que
	se cree uno nuevo)
	
// NOMENCLATURA

	desde Java 9 no puede usarse el guión bajo sólo como identificador ("_")

//CLASES ESTRUCTURA

1) Puedes declarar tantas clases como quieras en un mismo archivo. El requisito es 
que sólo haya una declarada como pública y coincida con el nombre del fichero

2) No todas las clases deben tener el nombre dentro de su código fuente (pregunta trampa)

Pej: puedes tener una clase anónima que implementa una interfaz y funciona sin ese requisito

	Runnable r = new Runnable(){ public void run(){
	  System.out.print("Do nothing!");
	  }
	};
	r.run();
	
	Aquí r, es una referencia a la clase, pero esa clase, no tiene nombre dentro de ella
	

3) El caracter _ no puede formar parte del nombre de una clase

4) Ninguna palabra clave de Java empieza por mayúscula

5) Ninguna clase a top level puede declarse como protected. Sí package protected o public.

6) Se pueden sobrecargar fuciones llamadas main dentro una clase siempre que se usen
   distintos parámetros
   
7) Property encapsulation le llaman a tener variables miembro de instancia privado
   Los métodos de acceso como te salgan de la polla -aunque pueda resultar paradójico-
   
8) Inner classes puede tener atributos STATIC (desde Java16)

9) Las clases deben tener algún tipo público al alto nivel que coincida con el nombre
   del fichero: pUde ser enum, interface, class, records..
   
10) Un tipo no anidado (top leve) puede ser sólo de
     acceso público o defaultt (package)
---------------------------------------------------------------------
---------------------------------------------------------------------

//OPERADORES

1) x = y--;  Primero se asigna. Después se decrementa. 
			 x es mayor que y después de la ejecución de esa instrucción
			 
2) Los operadores booleanos tienen más preferencia que una asginación (=)

3) Existe el operador bitewise ~ (complementario, negativo- operación binaria-)

4) ++i == 0; 1 suma y luego compara
   i++ == 0; 1 compara y luego suma
   
5)
	int i = 0; int j = 1; 
	if( (i++ == 0) & (j++ == 2) )
	{
			// 1 --> i = 0, true
			// 2 --> j = 2, false
			// LUEGO true & false --> false
		//NUNCA SE EJECUTA
	} else {
		//SÍ SE EJECUTA
	}
	
6) & o | siempre se ejecuta las dos partes (&& o ||) NO

   con números a los lados & ejecuta la operación AND binaria (BITWISE) - operación bit a bit
   ( 10 & 12 ) = 8 (1010 & 1100) = (1000)  
   con boolean, es un AND lógico, pero ejecuta todas las partes 
   |, igual, pero con OR
   
7) Operadores se evaluan por orden de prioridad.
   Si tienen la misma prioridad, de izquiera a derecha
   
   pej: 3 + 100/10*2-13 = 10 
   //100/10 = 10; 10*2=20; 20+3 = 23; 23 -13 = 10! 
   
8) Para tu sorpresa, el código siguiente, funciona 

class ScopeTest{    
static int x = 5;    

public static void main(String[] args){       

int x  = ( x=3 ) * 4;  // 1       
System.out.println(x);    

} } e IMPRIME 12

x es en todo momento la variable local que hace sombra (shadows)
a la variable estática x

Y FUNCIONA PQ (x=3) está entre paréntesis. Sólo por eso
si no lo estuviera, se intentaría acceder al valor de x
antes de iniciarla y daría fallo

int x  =  x* 4; //FALLo
int x  =  x; //FALLo

extra!
var x  = ( x=3 ) * 4//esto FALLA tb porque no puedes referenciar a la propia variable usando x

    

---------------------------------------------------------------------
---------------------------------------------------------------------
			 
			 
//SWITCH

1) long, float, double, and boolean NO PUEDEN USARSE NUNCA como variable Switch(v)

2) Con switch (enumerado)
	case Enumerado.VALOR -> ... ERROR! No puede usarse Enumerado.
								DIRECTAMENTE hay que usar VALOR
---------------------------------------------------------------------
---------------------------------------------------------------------

//FOR

1) 	int i ; 
	for ( i = 4, int t = 6; i < 0; i++ ) --> ILEGAL! no puedes declarar e inicializar mezclados
	
	
//TIPOS

1)Integer.MAX_VALUE+1 = Integer.MIN_VALUE !! --> da la vuelta, alucina :) 


2) return x - 20/x + x*x; //esto se castea automácamente como un INT!!!!


3) n = 1000.0 -- SE INSTANCIA automáticamente como un double! (si no lleva f)
   float n = 10 --sin embargo esto es correcto!
   float d = 0 * 1.5;	esto incorrecto pues se hace como un double

4)  byte b = 1;   char c = 1;   short s = 1;   int i = 1
	s = b * b ; -- incorrecto devuelve un entero
	s *= b ; -- correcto: las asginaciones compuestas hacen un casting explícito
	
5) si haces una división de 
	valor = float / 0 No DA EXCEPCIÓN
	el valor asume constante Float.POSITIVE_INFINITY or negative
	lo cual a su vez hace que Float.isInfinite(valor) de true
	
6) los float tiene precisión de 6 dígits
	si pasas de int a float, se pierde precisión
	y al pasar otra vezde float a int, no se obtiene el mismo número

7) Si usas un número real se instancia como double a no ser que pongas float explícitamente

	double amount = 1000.0; // BIEN
	Double amount = 1000.0; // B
	var amount = 1000.0; // B
	float amount = 1000.0; // X MAL debería llevar f


8) public class ParamTest
 {      
 	public static void printSum(double a, double b)
 	{
 	  System.out.println("In double "+(a+b));  
 	}   
 
 	public static void printSum(float a, float b)
 	{       
 		System.out.println("In float "+(a+b));   
 	}     
  	public static void main(String[] args) 
  	{       
  		printSum(1.0, 2.0);  //In double 3.0 es imprimido
  		printSum(1, 2);  //In float 3.0 es imprimido porque int está más cerca de float
  		 
  	} 
  }
  
9) Tipos primitivos numéricos. Puede incluir 

		long n = 0b11; prefijo binario 0b
		long s = 0B111;  ó 0B
		long creditCardNumber = 1234_5678_9012_3456L; guines bajos entre números
		long socialSecurityNumber = 999_99_9999L; sufijos L F o l/f long float
		float pi =  3.14_15f;
		long hexBytes = 0xFF_EC_DE_5e;
		long hexWords = 0xCAFE_BABE; 0x o 0X como prefijo para hexadecimales
		long maxLong = 0x7fff_ffff_ffff_ffffl;
		byte nybbles = 0b0010_0101;
		long bytes = 0b11010010_01101001_10010100_10010010;

//VAR 

1)  for (var i=5; i=0; i--) { } -- incorrecto no puedes asignar a un var 0, porque lo
  								toma como false
  								
2) var n; n = 0; -- INCORRECTO! no se puede declarar var sin inicializar	

3) VAR sólo puede ser usado para variables locales dentro de un método

---------------------------------------------------------------
--------------------------------------------------------------- 

//FOR EACH

1) for(final String s : Arrays.asList("a","b","c")){
        System.out.println(s);
    }
    
  Se permite declarar una variable iteradora como final
  porque JAVA internamente, en cada bucle la redeclara!!!!
  								
  								
  								
 -------------------------------------------------------------------
 -------------------------------------------------------------------
 
 
 //CONSTRUCTORES
 
 1) 
 
 class A{
   A() {  print();   }
   void print() { System.out.print("A "); }
}
class B extends A{
   int i =   4;
   public static void main(String[] args){
      A a = new B();//-----aquí"!
      a.print();
   }
   void print() { System.out.print(i+" "); }
}

ESTE código imprime 0 4

Al hacer new B(), hay una llamada implícita a A()
que llama a print, cuando i (variable de B) 
aún no ha sido iniciada (por que está A en proceso)
y vale 0.

luego la llamada a.print() hace 4


2) En un constructor no puedes llamar a super y this. o llamas a uno o a otro.

3) super() no se llama/pone automáticamente si hay constructor explícito
   con algún argumento
   
4) Los constructores NO se heredan

5) Sólo en un constructor puedes iniciar/asignar una variable static
   
------------------------------------------------------------------
------------------------------------------------------------------

//RECOLECTOR DE BASURA

1. An object can be made eligible for garbage collection by making sure there 
are no references pointing to that object. 

2. You cannot directly invoke the garbage collector. You can suggest the 
JVM to perform garbage collection by calling System.gc()

3. Ojo con el Recolectory las tampas 

public class Buddy {     
	Buddy upper;     
	String name;     
	public Buddy(){ } 
	        
	public Buddy(String name)
	{         this.name = name;     } 
	    
	public Buddy(String name, Buddy upper){         
		this.name =  name;         
		Buddy b = new Buddy(upper.name);//1         
		upper = b; //2     
	}
	
	EN LA LÍNEA 2 upper hacer refrencia al parámetro
	se puede eliminar por el GC tras acabar el método
	
4. CUIDADO no es lo mismo cambiar el objeto (la referencia, igualandolo a null)
   que si es un parametro apunta a otro sitio, pero deja el original como estaba
   que cambiar el ESTADO, que sería permantente aun saliendo del método
------------------------------------------------------------------
------------------------------------------------------------------

//INTEGER

1. Integer.parseInt(string, base) si sale del rango de int da fallo