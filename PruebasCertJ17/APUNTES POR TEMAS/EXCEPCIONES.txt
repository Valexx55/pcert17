//TRY-CON RECURSOS

1) En el siguiente trozo de código, este TWR es incorrecto porque debe declararse
stmt dentro del try de tipo try (Statement stmt = c.create...)

	Statement stmt = null;
	Connection c = DriverManager.getConnection("jdbc:derby://localhost:1527/sample", "app", "app");
	try(stmt = c.createStatement();)


En Java 9, se modifica el TWR y también es válido un stmt final/ final efectivo
con solo una asignación a este

	Statement stmt = c.createStatement(); 
	try(stmt) { } //esto esto valdría, pero no es el caso
	
----------------------------------------------------------
----------------------------------------------------------

//EXCEPCIONES

1) Existe la java.nio.file.AccessDeniedException!!!

2) catch(NoSuchFileException|IOException|AccessDeniedException e) --> INCORRECTO

	No puedes incluir excepciones en el mismo bloque catch que guarden relación
	de herencia: NoSuch y Access heredan de IOException en este caso
	
3) Si tienes una clase padre que lanza IOException en el constructor
   puedes tener una hija que lanze Exception (una más genérica) en el suyo
   (no más específica, ojo)
   
   esta norma es al reves sobreescribiendo en otros métodos que no son el constructor
   o sea, un método del hijo puede lanzar una excepción más específica que 
   el padre, pero no más genérica 

4) Si tienes varios catch asociados a un mismo try y dentro de un catch, tiras otra excepción
   con throws, ésta no es capturada por otro catch, sino que se propaga al método llamante
   
5) Si tienes un T_W_R y dentro de él se lanza una excepción, ésa es la que recibe el usuario
   S/e si se produce una expceción y luego se da una excecpión al ejecutar el autocloseable
   el usario recibe la expección de IOexception (la del try será surprimida - supresed exception-)
   
6) En un T_W_R el close se invoca al final del try!!! 
   de modo que el finally, si hay algun acceso
  al recurso cerrado automáticamente, fallaría
  
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

//EXCEPCIONES Y HERENCIA


1) Si es supertipo tiene Throws Exception en la cabecera, no es obligatorio
   que la implementación lo tenga
   
   Pero si una implmentación lanza una CHECKED exception, es porque 
   el supertipo también lo tiene (si no falla)
   
2) En constructores donde hay herencia, el subtipo debe declarar las mismas CHECKED
   exceptions o supertipos de ella. Tb puede añadir más.
   
3) En los métodos sobreescritos normales, pasa lo contrario. El subtipo tiene que
   declarar las CHECKED exceptions del padre o subtipos
   
   
    class A{     
   		public A() throws IOException{ }       
   		void m() throws IOException{ }   
   	}    
   	class B extends A{     
   	
   		//IOException OK, but FileNotFoundException is invalid     
   	  	public B() throws IOException{ }      
   	
   		//FileNotFoundException OK, but Exception is invalid     
   		void m() throws FileNotFoundException{ } 
   	}