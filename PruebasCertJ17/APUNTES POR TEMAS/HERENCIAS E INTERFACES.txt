//INTERFACES

1) Si una Interfaz declara un atributo, es públic static y final por defecto,
aunque no lo ponga, y por tanto no puede sobrrescribirse

2) Una clase no puede heredar el mismo método (cabecera) de dos interfaces distintas

3) Una interfaz puede definir métodos estáticos con una implementación dada

4) Una interfaz puede heredar de 2 interfaces :S

5) Una clase abstracta puede implementar una interfaz (y es como si heredase en realidad)

6) Puedo declarar una interfaz como abstract (aunque implícitamente lo sea)

7) Un método de una interfaz (sin modificador) se ha de implmentar con public (explícitamente)

8) Los métodos de una interfaz son implícitamente public abstract (implícito-el compilador lo pone)

QUE SEA IMPLÍCITO DICE QUE SI NO PONES NADA, EL COMPILADOR LO PONE. 
O PONE LO QUE LE FALTA.

PERO PEJ LOS MÉTODOS DE UNA INTERFAZ PUEDEN SER PRIVADO (NO TE PONE PUBLIC)
AUNQUE NO PROTECTECT

SÓLO public, default y private (x static)
Puede haber métodos de una interfaz:

8.1 modificadores permitodos en los métodos de una una IFAZ
	private
	private static
	static (public)
	default (public)
	abstract (public)

8.2 modificadores permitidos a una variable de una IFAZ
	NINGUNO
	SIEMPRE ES (public static final)

9) Una clase no puede marcarse como final y abstracta a la vez

10) Si intento tipar con modificadores distintos a los implícitos a un interfaz, peta

11) Las clases abstractas no tiene modificadores implícitos (ni obliga a la subclase)

12) Si una clase que hereda de otra define como static un método, está ocultando
	la versión del padre (anula el poliformismo)- Hidding methods
	
    12.1 un método estático en la clase padre sólo puede serl ocultado
    	 no sobreescrito
   
   12.2 Si una instancia define el mismo nombre y tipo de variable, 
        oculta a la del padre
        
 
----------------------------------------------------------------
----------------------------------------------------------------

// CLASES ANIDADAS (Nested)

1) Hay de 4 tipos:
	
		- Inners 
		- Estáticas: 
		- Locales : se definen dentro de un método, para encapsular una pequeña tarea
		- Anónimas : Sin nombre Subtipo Local heredan de una abstracta implementan una interfaz 
		
2) Ej anónima	var h = new Clase() {}; 
   h es una instancia de Clase - a su vez una Ifaz o Clase Abastracta-
   
3) Un clase estática no puede acceder a la variable miembro de su contenedora
   
   3.1) Un clase estática sí puede se instanciar sin invocar a la clase contenedora	
		
4) Un clase Inner siempre debe ser creada a través de su contenedora.
   No se puede refereri a su consctructor solamente. (estatica sí)
		
5) Siendo 
	
	class A {
	class C {}
	static class B {}
	static void nada ()
		{
			B b = new A.B()// es válido
			B b1 = new B(); es válido (por ser estático)
			B b2 = A.new B(); //NO ES Valido el new delante falta
			C c = new A().new C(); es valido
			C c = new C(); //No es válido (por ser dinamico)
		}