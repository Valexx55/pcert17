//COLEECIONES

1) List.copyOf y List.of son métodos factoría estáticos que no admiten nulos como 
parámetros. En caso de recibir algún nulo, lanzan una excepción

Ojo porque además estos métodos devulven listas NO modificables - cualquier método de
añadir, elimnar o modificar provoca fallo UnsuportedOperationException 

2) Hay métodos que crean vistas (bridging, views o backed) que en realidad
apuntan a la lista de orginal (no son nuevas listas)

	con los métodos 1), se crean nuevas listas (que no se pueden modificar)
	
	con Arrays.asList - crea una lista a partir de un array.
		la lista apunta a las mismas posiciones
		se puede modificar todo, menos el tamaño!
		
	con Collections.unmodifiableList
		Se crea la misma vista
		apunta a las mismas posiciones
		pero sólo para leer - no se puede modificar
	 
	con List.sublist [posi, posf);
		Se crea la misma vista
		las mimas posiciones [) 
		puedes hacer cualquier operación

3) Map.putIfAbsent (k, v) -> hace el put si esa k no está asociada ya a un valor

4) El uso de Genéricos, hace que evites castings y que asegures en tiempo de compilación
   que hay concordancia de tipos (cosa que no pasa con Object)
   Además de permitir un uso más eficiente el uso de la memoria
   

5) OjO ? SUPER extends

	si delcaro List<? extends Number> estoy diciendo que quiero una lista de Numbers
	(del subtipo que sea)
	
	si delcaro List<? super Number> estoy diciendo que quiero una lista de Numbers
	 o de un SUPERtipo de Numbers

	<<Por eso que List<? super Number> sería un subtipo de List<? super Integer> -->>


	5.1) super SÓLO PUEDE USARSE CON ?

6) List<Integer> NO es una List<Object> 
   List<Integer> SÍ es una List <? extends Number>
   List<Integer> SÍ es una List <?> 
   List<Integer> NO es una List <? super Number>
   (ver jcp17.herencia.PruebaInstaceOfGenericos)
   
   List<Number> es más restrictivo que List<? extends Number>
   el primero no permite subtipos el segundo sí	
   
7) En realidad, los genéricos están pensados para expresar relaciones entre tipos
   de parámetros de entrada y salida. Si no se da, mejor usar wildcard comodín y listo
   para permitir poliformismo
   
   Es preferible ? si no tiene dependecias con otro tipo devuelto
   
   
   public static <T, S extends T> void copy(List<T> dest, List<S> src) BIEN
   public static <T, ? extends T> void copy(List<T> dest, List<?> src) MÁS CORRECTO
 	
8) Box<Integer> integerBox = new Box<>(); // esto se permite desde J7
   dejas que el compilador infiera el tipo sin poner new Box<Integer>
   y se le llama DIAMOND diamante <>
   
   se llama Boxing cuando un primitivo se infiere a una clase
   y Unboxing al contrario. cuando una clase se pasa a primitivo
   automáticamente por Java
   
9) Convenciones en el nombrado de parámetros

	E - Element (used extensively by the Java Collections Framework)
	K - Key
	N - Number
	T - Type
	V - Value
	S,U,V etc. - 2nd, 3rd, 4th types
	
10) Nomenclatura cabecera método con genéricos

	<T, S> T funcion (Collection<S>)
	
11) Deque es un tipo de Queue FIFO, pasa que doblemente enlazada

	Deque<Integer> d = new ArrayDeque<>();
	d.add(1);d.add(2);d.addFirst(3); //con add añade por el final, encola. con push por el principio
	System.out.println(d.pollLast());
	System.out.println(d.pollLast());
	System.out.println(d.pollLast());
	
	imprime 2, 1, 3

12) Si un método padre usa genéricos en sus parámetros Set<Integer>, 
	el hijo puede quitarlos Set. 
	
	Pero no al revés.
    Si el padre no usa, el hijo no puede ponerlos.

13) La info de genéricos <T> se quita al compilar,  por lo que dos métodos
	distintos, no pueden sólo diferir en el T, pues daría fallo
	
	Esto lo llaman Type Erasure (borrado de tipos)
	
14) El TypeErasure provoca que los genéricos se vayan a traducir a su tipo
    frontera (padre) o a Object al compilarse.
    
    Aún así, en herencias y polimorfismo, puede pasar que el compilador genere
    funciones ficción, (bridge methods) para trabajar con Object en supertipos
    y evitar casques
	
15) super no se puede usar para limitar tipos sólo con ? WildCars

	public <T super String> Collection<T> transform(List<String> list) . ILLEGAL
	
	Esto pasa porque T al final se traduciría a Object, y hace que el tipo
	frontera sea inutil en la práctica.
	
	Intermanete en Java el Polfimorfismo está controlado/funciona, de arriba
	a abajo. De clases padre a clases hija.
	 
16) Relacionado con esto, un Refiable type es un tipo que se sabe en todo momento
	de qué tipo es: primitivos, clases normales, arrays, etc.
	
	Mientras que los no refiable, son List<Number> o List<Integer> a los que al quitar
	por el type erausre el genérico, no puedes usar instaceof por ejemplp
	porque no se sabe en ejecución de qué tipo es
	
17) Heap Pollution si tu usas List<T> y pasas elemntos T, bien, pero al quitarse
    el tipo Type erasure, Java no puede controlar en ejecución qué todo está bien
    de ahí que a veces salgan warnings con tipos. que se pueden quitar
    con @SageVarArgs y @SupresWarnings
    
18) COsas que no se pueden hacer con genéricos

	- Cannot Instantiate Generic Types with Primitive Types
		no puedo hacer 
		Pair<int, char> p = new Pair<>(8, 'a');
		
		sería
		
		Pair<Integer, Character> p = new Pair<>(8, 'a');
	- Cannot Create Instances of Type Parameters
		no puedo hacer new T();
		
	- Cannot Declare Static Fields Whose Types are Type Parameters
	
		implicaría que varias instancias (de un tipo distinto)
		tienen un mismo campo compartido (estático) de distinto tipo :S
		
	-	Cannot Use Casts or instanceof With Parameterized Types
	
		prohibido	List<?> list 
    				if (list instanceof ArrayList<?>)
    				
    	prohibido	List<Integer> li = new ArrayList<>();
					List<Number>  ln = (List<Number>) li;  // compile-time error

	-	Cannot Create Arrays of Parameterized Types
	
		prohibido List<Integer>[] arrayOfLists = new List<Integer>[2];

	-	Cannot Create, Catch, or Throw Objects of Parameterized Types
	
		prohibido catch (T e) {   // compile-time error
		
		prohibido class MathException<T> extends Exception
		
		PERMITIDO public void parse(File file) throws T

	-	Cannot Overload a Method Where the Formal Parameter Types of 
		Each Overload Erase to the Same Raw Type
		
		prohibido
					public void print(Set<String> strSet) { }
    				public void print(Set<Integer> intSet) { }
		